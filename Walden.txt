工作周志
动态成本产品分摊――Bug响应
本周目前产生48个BUG，经过分析之后，分部情况如下：

逻辑处理丢失为17个，这类BUG属于代码没有处理的部分；
逻辑处理错误为11个，这类BUG属于代码处理了，但是处理错误的部分；
补差算法错误为5个，这里BUG属于前后端算法不一致导致，但是这类BUG容易往复，而且修改时间用的比较长，这类BUG目前还是在处理中，目前已经有了处理方式；
需求处理丢失3个，主要是集中在分摊界面上，主要是集中在历史存在争议的地方，这些地方需要沉淀下来，避免以后测试过程中往复。
剩余的BUG属于测试之前没有沟通好而导致的。
补差算法
补差算法可以分为3类，按目标和面积分摊。按比例分摊和按金额分摊。
1.	按目标成本和面积分摊：先按照参数集合乘以总值得出金额，金额保存2位，比例保存12位，比例为参照值，金额补差；
目标成本分摊
	面积	参照比例	金额	存储比例
商品房	1000.000000000000 	33.330000000000 	1000.000000000000 	0.333333333333
商铺	1000.000000000000 	33.330000000000 	1000.000000000000 	0.333333333333
学校	1000.000000000000 	33.340000000000 	1000.000000000000 	0.333333333334
面积分摊
	目标成本	参照比例	金额	存储比例
商品房	1000.000000000000 	33.330000000000 	1000.000000000000 	0.333333333333
商铺	1000.000000000000 	33.330000000000 	1000.000000000000 	0.333333333333
学校	1000.000000000000 	33.340000000000 	1000.000000000000 	0.333333333334
2.	按金额分摊：根据金额计算比例，金额保存2位，比例保存12位，比例为参照值，比例补差；
	金额	参照比例	存储比例
商品房	1000.000000000000 	33.330000000000 	0.333333333
商铺	1000.000000000000 	33.330000000000 	0.333333333
学校	1000.000000000000 	33.340000000000 	0.333333334
3.	按比例分摊：根据比例计算金额，比例保存2位，金额保存2位，金额为参照值，金额补差；
	参照金额	比例	存储比例
商品房	999.900000000000 	33.330000000000 	33.330000000000
商铺	999.900000000000 	33.330000000000 	33.330000000000
学校	1000.200000000000 	33.340000000000 	33.340000000000
一些特殊场景的约定：
1.	还有一个就是当分摊面积，比例和金额为0的时候，计算的过程中，为0的产品不参与分摊，不参与补差；
2.	按照金额分摊的时候，计算含税值的时候使用含税值计算比例之后在补差，计算不含税的时候使用不含税计算比例之后在补差
关于补差的相关调整和计划：
1.	目前已经把影响产品动态成本那里的三层结构变成了两层结构，把的产品层去掉，所有取当前值的地方，改成直接取分摊规则里面的数据；
2.	准备把规则保存部分的，按照不同的分摊规则，抽象出不同的实现模式；
3.	准备把前端和后端的分摊模式统一，统一前后端补差逻辑。
一些感悟
1.	从48个BUG的分步来看，逻辑处理遗漏的占比很大，这个说明前期分析还是不够。团队内有这种思想既然给了这么多时间，还是有这么多BUG，那就说明给时间分析是没有必要，这种想法是极端错误的。应该这样想，给了这么多时间，我们还是有这么多问题，那就说明团队内，这种能力非常缺乏，然而这种能力对于产品团队是非常重要的，这种能力需要多多加强；
2.	本次重构动态产品分摊，本来就是一项很大的任务，在前期估算的时候，对时间上团队有一些分歧，我觉得这种分歧完全没有必要。对于要做的事情，就要把它做好，不需要时间来做的事情，本来就证明了它的价值，不需要时间来做的事情，这就说明事情本身的价值也不是太大；
3.	团队希望多一些信任，估算的时间只是一个估计，过程中能提高效率的地方，我们也会提高效率。估算出来的人天，不是为了别的，真正的原因还是项目压力，不能完全打开，对于未知的东西，基于责任心，才会估算那么多的，到时候能减的还是会减的，到时候最后用了多长时间，做完之后，结果还是会出来，估算多了，估算少了对团队都没有好处，只有加强分析影响能力，对于团队才是重要的，希望团队人员能清晰的认清这点；
4.	还有在重构这种大模块的时候，希望团队人员多寄予一些耐心，要不然以后这种事情，没有人原意做的，系统遗留的问题会越来越多，多多鼓励有想法的开发，去做自己想做的事情，并且寄予一些配套支持，这种老大难问题，才会越来越少，这种对大模块的重构本身就是一种创新，创新本来就是需要打破一些习惯，打破习惯，只要是参与的人都会有痛苦感
下周计划
1.	相应产品动态成本算法BUG；
2.	提取规划指标规则刷新

1.	合同导入需要考虑
a)	参考补充合同和分包合同新增前校验
2.	实付款登记&关联发票
a)	新增发票的时候不需要展示业务来源字段
b)	在列表页面需要展示
c)
工作周志
动态成本产品分摊
本周主要是对上个星期产生的BUG，进行整理和分析。
1.	首先对48个BUG进行逐个分析，并且分别添加单元测试；
2.	根据前端补差算法，完成后端补差算法，并且添加单元测试；
3.	在新增产品分摊规则，合约规划裂变，预估变更，设计变更以及现场签证统一了补差算法的后端调用。
在分析48个BUG的过程中，真心感觉到这个动作的必要性，同时对于之前的BUG没有对应的单元测试表示遗憾和担忧，为什么之前没有单元测试呢？其实原因也非常简单和粗暴，项目压力，希望以后有所改进。，此次BUG分析结果见附件《BUG单元测试对照表.xlsx》。
经过上星期的发现，很多差一分钱的问题，主要原因是补差算法不一致导致，主要集中在以下3种情况：
1.	不补差的数据和补差数据混合在一起使用；
2.	不同补差算法的数据混合在一起使用；
3.	前后补差算法不一致的数据混合在一起使用。
基于上述分析，统一前后端算法，统一前端调用入口（此处还没做），统一后端调用入口.
关于不断深入过程中的几个优化点和补漏项。
1.	添加IsValid字段，方便在合同结算，重新归集过程中统计总体发生值；
2.	框架对于科目整体退出分摊的情况的支持。
在添加IsValid字段的时候，刚开始还觉得比较简单，但是在实现的过程中发现，情况并没有那么顺利，因为需要考虑到2个点：
1.	不同单据的前置单据都不一样；
2.	需要整体更新，不能在过程中去循环调用数据库。
基于这两点考虑，所以处理起来比较麻烦，目前完成了合约规划和补充合同改造，准备下个星期完成余下的改造。
关于科目整体退出单据的情况，属于之前框架没有考虑到的部分。因为之前的框架是基于科目分摊规则进行循环计算的，但是在科目整体退出单据的情况下，并不会进入循环的相关代码中，所以会导致相关成本不会退出来，初步考虑在初始化上下文的地方，补齐没有的科目分摊规则，但是最好的算法是不同单据需要实现一个返回相关科目列表的函数，然后根据科目列表循环，依次分析不同科目的不同产品的分摊情况。
一些感悟
1.	本次产品分摊框架是基于对目标成本分摊而设计的，但是在不断实现的过程中发现，产品分摊和目标成本分摊是属于不同的事情，产品分摊类似与目标成本的按金额和按比例分摊部分；
2.	对于框架的改动，说明业务在不断明晰，以后这种类似的功能，需要预留一些时间，给框架改动与之相对应的实现变化；
3.	本次对于框架最大的失误点在于，当前值补差和前值补差都放在，进入动态成本的地方，应该全部都前置到保存的地方，所以本次很多BUG都保存的地方，或者与保存相关的地方。；
4.	目前4个人跌跌撞撞，进进出出，做了一些事情，总体大概只做了30%左右，剩下来的事情还有很多，做了一个分析，具体情况详见《产品分摊剩余工作项.xlsx》，这些问题都是需要解决的，不会自动消失的，希望不要抱有侥幸心理，觉得这些问题都会自动消失，希望能一步一个脚印地去解决每个问题。
下周计划
1.	添加IsValid字段的相关逻辑；
2.	解决科目整体退出分摊的情况；
3.	结算实现修改；
4.	合同，补充合同和分包合同功能收尾；
5.	付款线功能收尾；
工作周志
动态成本产品分摊过程中分摊单据收尾
在上个迭代过程测试合约规划相关功能的过程中，发现现有架构不支持后置单据退出所有前置单据科目成本的情况，因为现有架构是以当前单据科目分摊规则为循环基础的，假如当前单据没有分摊规则的时候，程序是不会进入产品动态成本计算循环中，假如当前单据有前置单据的时候，例如合约规划，合同，补充合同，分包合同，设计变更，设计变更完工确认，现场签证以及现场签证完工确认。
基于以上情况，需要修改计算动态成本产品基类，不以单据科目分摊规则为循环基础，改成以当前单据成本归集涉及的科目为循环基础。基本思路如下：
1.	获取当前单据的成本归集涉及的科目；
2.	获取当前单据的科目分摊相关的科目；
3.	取1 和2科目的并集；
4.	根据3中的科目获取科目所属分期对应的动态成本产品列表；
5.	开始循环科目；
6.	开始循环科目对应的科目分摊归集；
7.	开始循环产品分摊规则对应的产品分摊规则；
8.	计算差值；
9.	返回最新产品动态成本；
10.	最新动态产品动态成本入库。
除了三费导入，由于这个业务不了解，所以没有写单元测试，其他的单据均已经按照最新的架构，完成了改造和添加相关单元测试。
记得在讨论合同结算时候，无法确定合同结算最后一个单据，导致合同结算每次的查询量都比较大，在同测试讨论之后，发现以前的方案，在这种场景计算比较简单，综合之后决定在每个单据添加IsValid字段，以此来满足这种场景的计算，这些场景包括：
1.	合同结算
2.	重新归集，扣减对应合约规划对于成本的影响
基于上述情况，需要给所有单据添加IsValid字段，目前这个任务已经完成，数据库添加IsValid字段，实体添加IsValid，维护IsValid字段变化，并且添加了对应的单元测试。
目前动态成本产品分摊还剩下一些内容，由于需要休陪产假，把这部分的内容的思考写出来，供大家参考。
1.	合同结算（实现过程中分摊基类）
审批通过：成本归集->合约规划->科目->搜索前置单据->搜索IsValid=1的科目分摊规则->汇总产品分摊数据为前值
审批通过后驳回：审批通过前值*-1
2.	成本分摊－重新归集后影响：
有结算：取结算
无结算：成本归集->科目->搜索前置单据->搜索IsValid=1的科目分摊规则->汇总产品分摊数据为退出值
3.	公建分摊
公建分摊本质上同单据没有关系，主要是修改可售成本，然而可售成本影响因子有：产品，建筑成本。
修改公建分摊规则：公建产品->非公建产品->分期->科目
修改非公建产品的建筑本成本：非公建产品->公建产品->非公建产品->分期->科目
4.	重新分摊
属于特殊的过程中分摊，过程中分摊规则来自于之前的规则保存，集中分摊的规则来自于前端收集的规则，并且这个规则需要即可生效，所以重新分摊应该重写过程中分摊的Bill计算函数，然后给不同的单据去做实现。
5.	提取规划指标
提取规划指标需要分成三步去做
1.	更新不同单据上的分摊规则；
2.	合同线有结算取结算，无结算取IsValid=1的数据汇总；
3.	无合同付款申请，直接取IsValid=1的数据汇总。
6.	目标成本
目标成本本质上只有一个情况会影响动态成本产品分摊，那就是在最终目标成本变化的时候，动态成本产品分摊和动态成本公建分摊会受到影响，实际上是另外一种的提取规划指标。
7.	历史数据升级
这一块明浩很清楚，我不是太清楚
8.	历史无效代码删除
做着一块任务的时候需要从三个方面去考虑
1.	删除后端代码；
2.	删除前端调用；
3.	去掉XmlCommnad。
一些感悟
1.	把成本业务架构化的过程，实际上是一个不断缩小影响范围的过程，例如动态成本的本质是要更新某个因子上的变化值，变化值依次往上推分别为：科目->合约规划->单据->分期->项目或者合同类别->合约规划->单据->分期->项目，预警强控同动态成本差不多，差别是在于一个前置计算。目标成本是本质是要反应每个因子的变化，变化值依次往上推分别为：产品->科目->金额。目前的动态产品成本本质是更新产品的分摊差值，变化值依次往上推分别为：产品->科目->单据->分期->项目。综上所述，在做成本架构的过程中，要以产品，科目，合同类别，单据，分期以及项目来做，不能以某个特殊业务数据为基础，需要以基础数据为基础，把不同的业务连接起来，这样做的架构，适应能力更强，可扩展性更高。
2.	目前动态产品分摊，在某个单据的分摊过程中，只能看到这个单据最终的值，不能看到这个单据对于总体成本的影响值，个人觉得这个值，对于业务判断更加有价值，因为这个值是一个更加全局的参考值
下周计划
1.	请陪护假；
2.	每天关注动态成本分摊任务的进展，并且寄予最大的支持。
工作周志
本周记录
本周做在前面重构过程中一直担心的功能――提取规划指标。
前面一直担心三个问题：
1.	无法确定最终单据
2.	确定最终单据后，计算某个单据某个科目某个产品的动态成本，计算量过大
3.	结算单据的特殊计算
但是在重构过程中，通过同需求和测试共同商量，结合之前的相关设计，做出了三个重大改变
1.	为每个单据的科目分摊，添加IsValid字段，用来判断单据科目分摊相对于目前的动态成本是否有效
2.	为每个单据的科目分摊，添加IsUse字段，用来判断单据的科目分摊是否曾经影响过动态成本
3.	结算的时候，把所有的前置单据的科目分摊的IsValid字段都置为无效
基于以上的三个担心和三个改变，现在做提取规划指标，目前还算思路清晰，唯一需要担心的是大数据的环境下的效率问题。
为了预防这个问题，提取规划指标 部分，采取集中分摊的思路：把新规则和旧规则转换为同种结构，然后linq表达式来计算差值，最后整体更新产品动态成本，基本思路如下：
1.	根据所选范围确定变化的产品
2.	根据变化的产品的分期获取公建分摊相关的规则
3.	根据公建分摊相关规则和摊入分期或者摊出分期获取相关产品
4.	根据3中的相关产品对应分期的产品动态成本
5.	根据3中的相关产品对应分期的产品目标成本
6.	同步基准产品和正式产品
7.	循环相关的单据类型计算器
8.	调用计算器中的同步规划指标计算
9.	获取最终的重算DTO
10.	把最终的DTO放到后台去更新
11.	开启事务
12.	更新基准产品表
13.	更新标准产品表
14.	更新科目分摊规则
15.	更新产品分摊规则
16.	更新产品动态成本
17.	更新公建分摊规则
18.	提交事务
一些感悟
本周最大的一个感悟，让我想到王岐山推荐的一本书《旧制度与大革命》，里面有一个重要的几个观点：
1.	腐败不可纵容，经济的繁荣并不必然带来国家的长期稳定。
腐败相对于代码或者功能中的相关妥协，虽然这些妥协可以带来短期的出货量，但是从长远角度来这些妥协是让软件退化的加速器，这些东西必须去掉，这些债务必须偿还
2.	特权不可听任，特权会加剧社会不平，会导致社会的危机。
特权就是相当于某几个客户的特殊要求，我们是做产品的，不能把这些特权直接体现在产品中来，应该放到项目中去做，不能为了某个客户而去对产品进行大范围的修改，这些类似的功能，需要听取多方意见，才能加入到产品中来，同时这个也对产品相关人员的业务能力有更高的要求
3.	任何一个改革的新制度，都是基于在之前的制度的废墟上建立起来的
改革就类似与我们的重构，也就是我们现在所做的事情。在重构的时候，不能走两个极端，全盘抵制之前的方式，或者全盘接受之前的方式，需要在之前方式的废墟上进行重构，也就是打碎之后，找到一些有助于本次重构的地方进行重构。例如这次产品分摊，算上第一次重构，已经是第三次了，之前的IsValid字段并不能完全被IsUse字段替代，需要联合使用才能解决最终问题，关于对之前的单据的反写操作也需要留下来，有了这些深入的打开，本次产品分摊重构才会达到对应的目标。
4.	改革不可停滞。
随着我们的产品，在客户那里用得越来越深入，遇到的问题会越来越多，不能只满足与程序不出错，能用。我们每次改进的结束就是我们下一次改进的开始，每一次努力之后，我们的产品的问题就会减少一个。
下周计划
1.	目标成本产品分摊对动态成本产品分摊的影响
2.	获取宽表相关输入，并且整体分析宽表建立逻辑

工作周志
本周记录
本周感觉整个团队的执行力很强的，但是有几个故事，铁三角相关人员，感觉有点不在状态上。例如【工具】数据迁移工具ERP352sp1规则配置-、【项目】保利－性能优化以及发版文档跟进三个故事。由于这三个故事，没有验收标准或者不能本迭代验收，对于这种类型的故事，就不应该纳入到迭代中来。目前对于这类故事，当在迭代提出来之后，相关的报告人就是修改验收标准。修改验收标准没关系，但是新的验收标准也是不可度量的，可验收的操作性很低，这个大大提高了迭代的风险。也许放到里面，是为了管理，方便每日晨会来对称信息，但是每天对称的时候，这些故事出现问题，铁三角相关人员，都把锅丢给，最后一个负责的人，故事没法验收，按照之前的经验，提出故事的人，是不会有改进的，就感觉是最后一个负责故事的人，虽然在口上没有说，但是给人的观感是这样的，这样不利于发挥团队的整体效率，并且向着良好的方向去发展。对于一个没有明确需求，没有过程中的不断沟通，最后连验收标准都模棱两可，这样的故事注定失败，就相当于一句话所说的那样：“对于一个悲剧，所有看到他产生的人，都是同谋者。”
一些感悟
本周做轮值SM，感觉团队非常缺少，完成短平快闭环故事的能力，说的严苛一点就是，每个迭代本质上是小型的瀑布，没有发挥敏捷开发应该发挥出来的优势。感觉大家在一件事情还没有求证的情况下，就是慌着忙着去计划下一个故事，这样的习惯非常不好，这几乎同瀑布一样，即使是穿上了马甲，同样还是瀑布。
短平快闭环故事要求铁三角，能够快速形成明确的迭代范围（假如明确不了，可以考虑缩小范围），确定完成之后，根据上一步情况，快速调整下一步的目标。
为什么要短平快？
因为这样试错成本最低
为什么要短平快？
因为这样才能不断的根据上一步的输入确定一步的策略，最终做出最接近真实需求的版本
为什么要闭环？
这个是一个反馈机制，假如没有这个反馈机制。那么现在犯的错误，下次一定还会犯。
下周计划
目标成本线性能优化

工作周志
本周记录（1015~1019）
本周主要是在相应主项目的相关问题，也是井田制也实施的一年，基本上也改变了，之前随便甩锅的现象，各个模块都有对应的人负责，总体来说还是非常好的。
本周也提前做了些对象化改造的工作，我个人认为，对象化改造非常有必要，是产品真正SAAS转换的必经之路，但是我们如何扣好第一颗扣子呢？
我想从哲学的角度去问成本系统三个问题？
我是谁？
我来自哪里？
我将到哪里？
这个问题其实也可以问每个子模块。
以目标成本为例。
门卫：你是谁？
目标成本：我是用来做预算的。
门卫：你来自哪里？
目标成本：我是以利润为导向，综合成本测算因子，结合成本测算体系而形成。
门卫：你将到哪里？
目标成本：我将成为成本管理基线，知道后期成本执行
当每个模块回答了这三个问题，就可以明确目标成本的，输入（我来自哪里？）和输出（我将到哪里？）
在明确输入和输出之后，你们输入如和输出之间的东西，就对应这个系统中的每个功能。
对于每个功能，我们也可以不断细化深入的问，门卫经常问的三个问题。
这些回答，必须明确，不能拖泥带水，模棱两可。因为这些就是基线，系统底色，这些是变的基础。
就像独立宣言一样，这个美国民主和自由的前提，没有这个底色，可以相信，现在的美国不会像现在这样发达。
对象化的目的是为了自升级，我理解的自升级，必须是要有前提，假如说系统，每个地方，没有限制的自升级，你们我们系统就没有存在的必要了，因为这样的系统不存在。
自升级必须是基于某个大前提下，才会有意义。这个大前提就是每个系统必须回答的那三个问题，这个三个问题，回答清楚，那么对象化和自升级，就会有章法，才会有所效果。
一些感悟
在做一些具体繁琐的事情的的时候，跳出琐碎，从整体和哲学的角度去考虑问题，往往可以得到很多启示。
下周计划
对象化改造讨论

工作周志
本周记录
本周主要是在做目标成本产品分摊对动态成本产品分摊的相关影响，由于之前对这一块的触发点没有仔细考虑清楚，并且在自己没有考虑清楚的情况下，没有去向需求求证，本周一开始就开始埋点，到全部写完之后单元测试和代码之后，准备自测的时候才发现点埋错了。
之前的埋点方案考虑复杂了，其实在编制目标成本，目标成本分摊和公建分摊的时候不会影响产品动态成本，因为编制目标成本和目标成本分摊的时候，不会影响最新的产品目标成本的值，因为只有审批通过才会影响最新产品目标成本的值，进而影响产品的动态成本。在公建分摊的时候只会影响可售成本，但是产品的动态成本的按照目标成本分摊中的成本指的是建筑成本，综上所述，产品目标成本对产品动态成本的影响点如下：
1.目标成本审批通过：假如当前版本为最新版本，则需要用最新的产品目标成本更新产品动态成本及产品动态成本分摊规则
2.目标成本审批后驳回：假如当前版本为最新版本，则需要用最新的产品目标成本更新产品动态成本及产品动态成本分摊规则
3.调整成本审批通过：假如调整成本对应的目标成本版本为最新版本，则需要用最新的产品目标成本更新产品动态成本及产品动态成本分摊规则
4.调整成本审批后驳回：假如调整成本对应的目标成本版本为最新版本，则需要用最新的产品目标成本更新产品动态成本及产品动态成本分摊规则
这个埋点是在星期五发现并完成的，幸好只是埋点的地方错了，通过产品目标成本更新产品动态成本的地方没有问题，这个方案的步骤如下：
1.获取最新的产品目标成本
2.获取目标成本对应分期中，动态成本产品分摊的分摊模式为按目标成本分摊的科目分摊规则
3.获取2中科目分摊规则对应的产品分摊规则
4.根据3中产品分摊规则，重新计算新的产品分摊规则
5.根据3中的分摊规则和4中的分摊规则计算差值集合
6.根据5中的差值集合更新产品动态成本
7.根据6中的产品动态成本更新公建分摊规则
8.根据7中的公建分摊规则更新产品动态成本
9.根据8中的计算结果保存最终的重新计算更新产品动态成本
10.保存产品分摊规则和公建分摊规则，包括科目分摊和产品分摊规则
一些感悟
在需求文档不全的情况，需要对称需求和测试对某一个业务的理解，结合开发视角，形成三方统一，然后开始编码，否在测试阶段和验收阶段会出现分歧，导致返工。
下周计划
1.删除产品分摊老代码
2.修复所有代码检查原来规范
3.修复并整理代码检查新规范
4.修复并整理性能测试单用户点击问题




